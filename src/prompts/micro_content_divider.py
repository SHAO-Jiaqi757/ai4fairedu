from src.prompts.base import PromptTemplate

def micro_content_divider_prompt() -> PromptTemplate:
    """ADHD用户的内容微分割提示"""
    
    system_message = """作为ADHD学习内容设计专家，您的任务是将长篇内容分解为最适合ADHD认知特点的微学习单元。请遵循以下认知科学原则：

1. 注意力周期：设计符合ADHD典型注意力周期(15-25分钟)的内容单元，预留注意力衰减时间。
2. 认知负荷理论：控制每个单元的内部元素数量(5-9个关键点)，避免工作记忆超载。
3. 心流理论：为每个单元设置适度挑战，提供即时反馈，创造成功体验。
4. 多感官编码：在单元设计中整合视觉、听觉和动觉元素的提示，增强记忆编码。
5. 内在动机：将内容与实际应用和个人兴趣关联，提高参与度。

每个微学习单元应包含：
- 单元标题：简洁明确的主题
- 学习目标：可实现的单一目标
- 估计时间：5-10分钟的完成时间
- 核心内容：重点突出，层次清晰
- 互动元素：保持参与的简短活动
- 检查点：验证理解的1-2个问题
- 下一步提示：指向后续单元的桥梁

请确保单元之间有明确的逻辑连接，并避免创建需要长时间专注才能理解的复杂结构。"""

    # Few-shot examples
    examples = [
        {
            "human": """请将以下内容分解为微学习单元:
数据结构基础 - 链表

链表是一种常见的线性数据结构，由一系列节点组成，每个节点包含数据字段和指向下一个节点的引用。与数组不同，链表元素在内存中不是连续存储的，而是通过指针连接。

链表主要分为三种类型：单链表、双向链表和循环链表。单链表中的节点只有一个指向下一节点的指针；双向链表的节点有两个指针，分别指向前驱和后继节点；循环链表是首尾相连的链表，最后一个节点指向第一个节点。

链表操作包括：插入、删除、查找和遍历。与数组相比，链表在插入和删除操作上更高效，时间复杂度为O(1)，但查找操作效率较低，时间复杂度为O(n)。

链表在实际编程中应用广泛，例如实现栈、队列、哈希表、图等复杂数据结构，也用于内存管理、多任务调度等系统级应用。

链表实现需要注意边界条件处理，如空链表、只有一个节点的链表、操作首尾节点等情况。常见错误包括空指针引用、内存泄漏和断链。

实现链表时，通常先定义节点结构，包含数据和指针字段，然后实现各种操作方法。以下是链表基本操作的伪代码：
1. 创建新节点：分配内存，设置数据和指针
2. 插入节点：调整相关节点的指针指向
3. 删除节点：找到目标节点，调整指针，释放内存
4. 查找节点：从头节点开始，逐个比较数据
5. 遍历链表：从头到尾访问每个节点""",
            
            "assistant": """我已将链表内容分解为5个微学习单元：

## 单元1：链表基本概念
**标题**：什么是链表？
**学习目标**：理解链表的基本定义和特点
**估计时间**：5分钟
**核心内容**：
- 链表定义：由节点组成的线性数据结构
- 节点组成：数据字段 + 指向下一节点的引用
- 关键特点：非连续内存存储，通过指针连接
- 与数组对比：存储方式的不同

**互动元素**：想象一列火车车厢，每节车厢装着数据，同时知道下一节车厢在哪
**检查点**：链表与数组的主要区别是什么？
**下一步**：了解不同类型的链表

## 单元2：链表的类型
**标题**：链表家族：认识三种主要链表类型
**学习目标**：区分单链表、双向链表和循环链表
**估计时间**：6分钟
**核心内容**：
- 单链表：节点只有一个指向下一节点的指针
- 双向链表：节点有两个指针，指向前驱和后继节点
- 循环链表：首尾相连，最后节点指向第一个节点
- 简单视觉表示：每种类型的图示

**互动元素**：用手指在桌上画出三种链表的示意图
**检查点**：如果需要经常在两个方向遍历数据，应选择哪种链表？
**下一步**：学习链表的基本操作

## 单元3：链表基本操作
**标题**：链表操作大揭秘：增删查遍
**学习目标**：了解链表的四种基本操作及其效率
**估计时间**：8分钟
**核心内容**：
- 插入操作：添加新节点的步骤，O(1)时间复杂度
- 删除操作：移除节点的步骤，O(1)时间复杂度
- 查找操作：寻找特定节点，O(n)时间复杂度
- 遍历操作：访问所有节点，O(n)时间复杂度
- 操作效率：与数组对比的优缺点

**互动元素**：思考生活中的队伍，有人插队或离开时的情景
**检查点**：链表相比数组的主要优势是什么？主要劣势是什么？
**下一步**：探索链表的实际应用

## 单元4：链表的应用
**标题**：链表在行动：实际应用场景
**学习目标**：了解链表在编程中的常见应用
**估计时间**：5分钟
**核心内容**：
- 链表作为基础：实现栈、队列和哈希表
- 复杂数据结构：图的邻接表表示
- 系统应用：内存管理、多任务调度
- 应用选择：何时选择链表而非其他数据结构

**互动元素**：想象你是操作系统调度器，如何使用链表管理任务
**检查点**：为什么链表适合实现队列这种数据结构？
**下一步**：学习链表实现时的注意事项

## 单元5：链表实现技巧
**标题**：链表编程：实现技巧与常见陷阱
**学习目标**：掌握链表实现的关键要点
**估计时间**：7分钟
**核心内容**：
- 边界条件：空链表、单节点链表、首尾节点操作
- 常见错误：空指针引用、内存泄漏、断链
- 节点结构：定义包含数据和指针字段的结构
- 基本实现步骤：5个关键操作的伪代码概要

**互动元素**：思考如删除链表最后一个节点时需要注意什么
**检查点**：实现链表时最容易忽视的边界条件是什么？
**下一步**：尝试自己实现一个简单的单链表"""
        },
        # 可以添加更多few-shot examples...
    ]
    
    return PromptTemplate(
        name="micro_content_divider",
        description="将长篇内容分解为适合ADHD学习者的微学习单元",
        system_message=system_message,
        few_shot_examples=examples
    ) 